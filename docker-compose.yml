version: '3'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.6-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecom-rabbit-ts-network

  auth-db:
    container_name: auth-db
    image: mongo
    ports:
      - "27020:27017"
    volumes:
      - auth-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  authentication:
    container_name: authentication
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://auth-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network

  user-db:
    container_name: user-db
    image: mongo
    ports:
      - "27021:27017"
    volumes:
      - user-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  user-management:
    container_name: user-management
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://user-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network

  # product-db:
  #   container_name: product-db
  #   image: mongo
  #   ports:
  #     - "27018:27017"
  #   volumes:
  #     - product-data:/data/db
  #   networks:
  #     - ecom-rabbit-ts-network

  # product-management:
  #   container_name: product-management
  #   build:
  #     context: ./services/product-management
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - PORT=3000
  #     - MONGO_URI=mongodb://product-db:27017/ecom-rabbit-ts
  #     - MESSAGE_BUS=amqp://rabbitmq
  #   depends_on:
  #     - rabbitmq
  #     - product-db
  #   networks:
  #     - ecom-rabbit-ts-network

volumes:
  auth-data:
  user-data:
  # product-data:


networks:
  ecom-rabbit-ts-network:
    driver: bridge
    ipam:
      config:
        - subnet: "192.168.0.0/24"
  # user-management:
  #   container_name: user-management
  #   build:
  #     context: ./services/user-management
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     - PORT=3000
  #     - MONGO_URI=mongodb://users-db:27017/ecom-rabbit-ts
  #     - MESSAGE_BUS=amqp://rabbitmq
  #   links:
  #     - rabbitmq
  #     - users-db
  #   networks:
  #     - ecom-rabbit-ts-network



  # notification:
  #   container_name: notification
  #   build:
  #     context: ./services/notification
  #     dockerfile: Dockerfile
  #   environment:
  #     - MESSAGE_BUS=amqp://rabbitmq
  #     - EMAIL_SERVICE=gmail
  #     - EMAIL_ID=noreply.ecom-rabbit-tsapplication@gmail.com
  #     - EMAIL_PASSWORD=Testing0*
  #     - ADMIN_EMAIL=ecom-rabbit-tsapp340ct@gmail.com
  #     - MONGO_URI=mongodb://notification-db:27017/ecom-rabbit-ts
  #   links:
  #     - rabbitmq
  #     - notification-db
  #   networks:
  #     - ecom-rabbit-ts-network

  # users-db:
  #   container_name: users-db
  #   image: mongo
  #   ports:
  #     - "27019:27017"
  #   volumes:
  #     - users-data:/data/db
  #   networks:
  #     - ecom-rabbit-ts-network

  # notification-db:
  #   container_name: notification-db
  #   image: mongo
  #   ports:
  #     - "27021:27017"
  #   volumes:
  #     - notification-data:/data/db
  #   networks:
  #     - ecom-rabbit-ts-network
